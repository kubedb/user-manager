/*
Copyright 2018 The Attic Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubedb/user-manager/apis/users/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MessagingServiceLister helps list MessagingServices.
type MessagingServiceLister interface {
	// List lists all MessagingServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MessagingService, err error)
	// MessagingServices returns an object that can list and get MessagingServices.
	MessagingServices(namespace string) MessagingServiceNamespaceLister
	MessagingServiceListerExpansion
}

// messagingServiceLister implements the MessagingServiceLister interface.
type messagingServiceLister struct {
	indexer cache.Indexer
}

// NewMessagingServiceLister returns a new MessagingServiceLister.
func NewMessagingServiceLister(indexer cache.Indexer) MessagingServiceLister {
	return &messagingServiceLister{indexer: indexer}
}

// List lists all MessagingServices in the indexer.
func (s *messagingServiceLister) List(selector labels.Selector) (ret []*v1alpha1.MessagingService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MessagingService))
	})
	return ret, err
}

// MessagingServices returns an object that can list and get MessagingServices.
func (s *messagingServiceLister) MessagingServices(namespace string) MessagingServiceNamespaceLister {
	return messagingServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MessagingServiceNamespaceLister helps list and get MessagingServices.
type MessagingServiceNamespaceLister interface {
	// List lists all MessagingServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MessagingService, err error)
	// Get retrieves the MessagingService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MessagingService, error)
	MessagingServiceNamespaceListerExpansion
}

// messagingServiceNamespaceLister implements the MessagingServiceNamespaceLister
// interface.
type messagingServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MessagingServices in the indexer for a given namespace.
func (s messagingServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MessagingService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MessagingService))
	})
	return ret, err
}

// Get retrieves the MessagingService from the indexer for a given namespace and name.
func (s messagingServiceNamespaceLister) Get(name string) (*v1alpha1.MessagingService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("messagingservice"), name)
	}
	return obj.(*v1alpha1.MessagingService), nil
}
